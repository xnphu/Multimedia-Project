/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package multimedia.project;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author Admin
 */
public class ResultImage extends javax.swing.JPanel {

    BufferedImage img;
    int[][][] rgbBuffer;

    public ResultImage() {
        initComponents();
        img = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void loadImage(String FilePath) {
        try {
            img = ImageIO.read(new File(FilePath));
            rgbBuffer = new int[3][img.getHeight()][img.getWidth()];
        } catch (IOException ex) {
            Logger.getLogger(ResultImage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void ReadImagePixels() {
        for (int row = 0; row < img.getHeight(); row++) {
            for (int col = 0; col < img.getWidth(); col++) {
                Color c = new Color(img.getRGB(col, row));
                rgbBuffer[0][row][col] = c.getRed();
                rgbBuffer[1][row][col] = c.getGreen();
                rgbBuffer[2][row][col] = c.getBlue();
            }
        }
    }

    //Filter làm mờ ảnh
    public void blurImage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                ReadImagePixels();
                for (int row = 1; row < img.getHeight() - 1; row++) {
                    for (int col = 1; col < img.getWidth() - 1; col++) {
                        int r
                                = rgbBuffer[0][row - 1][col - 1] + rgbBuffer[0][row - 1][col] + rgbBuffer[0][row - 1][col + 1]
                                + rgbBuffer[0][row][col - 1] + rgbBuffer[0][row - 1][col] + rgbBuffer[0][row - 1][col + 1]
                                + rgbBuffer[0][row + 1][col - 1] + rgbBuffer[0][row + 1][col] + rgbBuffer[0][row + 1][col + 1];
                        int g
                                = rgbBuffer[1][row - 1][col - 1] + rgbBuffer[1][row - 1][col] + rgbBuffer[1][row - 1][col + 1]
                                + rgbBuffer[1][row][col - 1] + rgbBuffer[1][row - 1][col] + rgbBuffer[1][row - 1][col + 1]
                                + rgbBuffer[1][row + 1][col - 1] + rgbBuffer[1][row + 1][col] + rgbBuffer[1][row + 1][col + 1];
                        int b
                                = rgbBuffer[2][row - 1][col - 1] + rgbBuffer[2][row - 1][col] + rgbBuffer[2][row - 1][col + 1]
                                + rgbBuffer[2][row][col - 1] + rgbBuffer[2][row - 1][col] + rgbBuffer[2][row - 1][col + 1]
                                + rgbBuffer[2][row + 1][col - 1] + rgbBuffer[2][row + 1][col] + rgbBuffer[2][row + 1][col + 1];
                        Color c = new Color(r / 9, g / 9, b / 9);
                        img.setRGB(col, row, c.getRGB());
                    }
                }
                repaint();
            }
        }).start();
    }

    //Filter làm nổi, chìm ảnh
    public void embossImage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                ReadImagePixels();
                for (int row = 1; row < img.getHeight() - 1; row++) {
                    for (int col = 1; col < img.getWidth() - 1; col++) {
                        int r, g, b;
                        r = Math.min(Math.abs((rgbBuffer[0][row][col] - rgbBuffer[0][row - 1][col - 1]) + 128), 255);
                        g = Math.min(Math.abs((rgbBuffer[1][row][col] - rgbBuffer[1][row - 1][col - 1]) + 128), 255);
                        b = Math.min(Math.abs((rgbBuffer[2][row][col] - rgbBuffer[2][row - 1][col - 1]) + 128), 255);
                        Color c = new Color(r, g, b);
                        img.setRGB(col, row, c.getRGB());
                    }
                }
                repaint();
            }
        }).start();
    }

    //Filter làm sắc nét ảnh
    public void sharpenImage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                ReadImagePixels();
                for (int row = 1; row < img.getHeight() - 1; row++) {
                    for (int col = 1; col < img.getWidth() - 1; col++) {
                        int r, g, b;
                        r = (int) Math.min(Math.abs(rgbBuffer[0][row][col] + 0.6 * (rgbBuffer[0][row][col] - rgbBuffer[0][row - 1][col - 1])), 255);
                        g = (int) Math.min(Math.abs(rgbBuffer[1][row][col] + 0.6 * (rgbBuffer[1][row][col] - rgbBuffer[1][row - 1][col - 1])), 255);
                        b = (int) Math.min(Math.abs(rgbBuffer[2][row][col] + 0.6 * (rgbBuffer[2][row][col] - rgbBuffer[2][row - 1][col - 1])), 255);
                        Color c = new Color(r, g, b);
                        img.setRGB(col, row, c.getRGB());
                    }
                }
                repaint();
            }
        }).start();
    }

    //Filter âm bản
    public void solarizeImage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                ReadImagePixels();
                for (int row = 1; row < img.getHeight() - 1; row++) {
                    for (int col = 1; col < img.getWidth() - 1; col++) {
                        int r = 0, g = 0, b = 0;
                        if (rgbBuffer[0][row][col] < 128) {
                            r = 255 - rgbBuffer[0][row][col];
                        }
                        if (rgbBuffer[1][row][col] < 128) {
                            g = 255 - rgbBuffer[1][row][col];
                        }
                        if (rgbBuffer[2][row][col] < 128) {
                            b = 255 - rgbBuffer[2][row][col];
                        }
                        Color c = new Color(r, g, b);
                        img.setRGB(col, row, c.getRGB());
                    }
                }
                repaint();
            }
        }).start();
    }

    //Filter làm phân tán các pixel trong ảnh
    public void diffuseImage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                ReadImagePixels();
                for (int row = 2; row < img.getHeight() - 3; row++) {
                    for (int col = 2; col < img.getWidth() - 3; col++) {
                        int r, g, b;
                        int rx = new Random().nextInt(4);
                        int ry = new Random().nextInt(4);
                        r = rgbBuffer[0][row + rx][col + ry];
                        g = rgbBuffer[1][row + rx][col + ry];
                        b = rgbBuffer[2][row + rx][col + ry];
                        Color c = new Color(r, g, b);
                        img.setRGB(col, row, c.getRGB());
                    }
                }
                repaint();
            }
        }).start();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (img != null) {
            g.drawImage(img, 0, 0, null);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
